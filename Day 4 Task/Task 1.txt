1. Why do we use loops in programming languages?
 Loops programming languages used to repeat a block of code multiple times.

Efficiency: Automating repetitive tasks without writing redundant code.
Automation: Performing tasks like iterating over data structures, processing elements, and generating sequences.
Dynamic Control: Allowing the execution of code based on conditions that may change during runtime.
Code Simplification: Reducing code complexity and improving readability by eliminating the need for manual repetition.
----------------------------------------------------------------
2. Difference between while and do...while loops
while loop

Condition Check: The condition is checked before the execution of the loop's body.
Syntax:
while (condition) {
  // code to be executed
}
Execution: If the condition is false initially, the loop's body may never execute.
Use Case: Suitable when the number of iterations is not known beforehand and the condition needs to be checked before each iteration.

do...while loop:

Condition Check: The condition is checked after the execution of the loop's body.

Syntax:
do {
  // code to be executed
} while (condition);
Execution: The loop's body is guaranteed to execute at least once, regardless of whether the condition is true or false initially.
Use Case: Useful when the loop's body must execute at least once, typically when the initial execution is needed before checking the condition.
--------------------------------------------------------------------------
3. How to represent loops in algorithms?
In algorithms, loops are represented using specific constructs to indicate repetition. Common representations include:

Flowcharts: Visual diagrams using shapes like arrows and loops to show the flow of control.

Pseudocode: Descriptive language resembling code but without specific syntax.

Algorithm Steps
Algorithm steps describe each step of the algorithm in detail, including loop structures.

while Loop in Algorithm Steps
Initialize the loop control variable.
WHILE the condition is true, repeat steps 3-4:
3. Execute the loop body.
4. Update the loop control variable.
End the loop.
do...while Loop in Algorithm Steps
Initialize the loop control variable.
DO the following:
3. Execute the loop body.
4. Update the loop control variable.
WHILE the condition is true.
End the loop.
